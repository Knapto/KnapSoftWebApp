// <auto-generated />
using System;
using KnapSoft.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KnapSoft.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250323114630_imagesseed")]
    partial class imagesseed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KnapSoft.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Umožňuje přihlášení uživatelů do systému pomocí e-mailu a hesla. Vaši klienti nebo zaměstnanci se mohou bezpečně registrovat, přihlašovat a spravovat své účty.",
                            Name = "Identity",
                            Price = 2000m
                        },
                        new
                        {
                            Id = 2,
                            Description = "Moderní způsob práce s databází, který zajišťuje, že všechna data uložená ve vaší aplikaci jsou bezpečná, přehledná a snadno spravovatelná. Vy o tom nemusíte vědět nic – všechno běží na pozadí.",
                            Name = "Entity Framework",
                            Price = 1500m
                        },
                        new
                        {
                            Id = 3,
                            Description = "Vaši zákazníci mohou jednoduše zaplatit kartou nebo si nastavit předplatné. Rychlé a bezpečné platby přímo na vašem webu.",
                            Name = "Stripe integrace",
                            Price = 2500m
                        },
                        new
                        {
                            Id = 4,
                            Description = "Snadné ovládání celého systému přes přehledné administrační rozhraní – správa obsahu, uživatelů nebo objednávek na pár kliknutí.",
                            Name = "Admin panel",
                            Price = 2000m
                        },
                        new
                        {
                            Id = 5,
                            Description = "Odesílání automatických e-mailů, SMS nebo upozornění na mobil. Například potvrzení objednávky, připomenutí schůzky nebo změna stavu.",
                            Name = "Notifikace",
                            Price = 1800m
                        },
                        new
                        {
                            Id = 6,
                            Description = "Zákazníci si sami online vyberou volný termín – ideální pro kadeřnictví, ordinace, poradenství nebo služby s objednávkami.",
                            Name = "Rezervační systém",
                            Price = 4000m
                        },
                        new
                        {
                            Id = 7,
                            Description = "Automaticky generuje faktury, které si můžete stáhnout v PDF. Přehled o platbách, daňových dokladech a export pro účetní.",
                            Name = "Fakturační systém",
                            Price = 3500m
                        },
                        new
                        {
                            Id = 8,
                            Description = "Technické rozhraní, které umožňuje propojit váš systém s jinými aplikacemi nebo mobilními zařízeními. Vhodné pro pokročilejší použití.",
                            Name = "REST API",
                            Price = 2000m
                        },
                        new
                        {
                            Id = 9,
                            Description = "Jedna aplikace může sloužit více firmám nebo pobočkám – každá má své vlastní prostředí, ale vše běží v jednom systému.",
                            Name = "Multitenancy",
                            Price = 5000m
                        },
                        new
                        {
                            Id = 10,
                            Description = "Vaše aplikace bude běžet na výkonném serveru, který máme plně pod kontrolou. Vhodné pro náročnější projekty a firmy.",
                            Name = "Hosting (VPS)",
                            Price = 5000m
                        },
                        new
                        {
                            Id = 11,
                            Description = "Moderní cloudový hosting od Microsoftu. Škálovatelné, bezpečné a spolehlivé řešení s automatickými aktualizacemi a zálohami.",
                            Name = "Hosting (Azure)",
                            Price = 3500m
                        },
                        new
                        {
                            Id = 12,
                            Description = "Vaše webová aplikace bude fungovat i bez připojení k internetu a může být nainstalována jako „mobilní aplikace“ na domovskou obrazovku telefonu.",
                            Name = "PWA podpora",
                            Price = 2000m
                        },
                        new
                        {
                            Id = 13,
                            Description = "Spolehlivé odesílání e-mailů z vašeho systému (potvrzení, oznámení, upozornění). Funguje přes zabezpečené servery.",
                            Name = "Email systém",
                            Price = 1000m
                        },
                        new
                        {
                            Id = 14,
                            Description = "Vaše stránky budou přátelské pro vyhledávače (Google atd.), takže vás zákazníci snáze najdou online.",
                            Name = "SEO optimalizace",
                            Price = 1500m
                        },
                        new
                        {
                            Id = 15,
                            Description = "2 hodiny konzultací nebo pomoci měsíčně – e-mail, úpravy, otázky. Vhodné pro běžný provoz.",
                            Name = "Základní technická podpora",
                            Price = 1200m
                        },
                        new
                        {
                            Id = 16,
                            Description = "Reakce do 24 hodin, až 5 hodin měsíčně. Ideální pro firmy, kde je klíčová rychlost reakce a podpora při problémech.",
                            Name = "Prioritní podpora",
                            Price = 2500m
                        },
                        new
                        {
                            Id = 17,
                            Description = "Napojíme váš systém na české i mezinárodní platební brány – GoPay, ComGate, Stripe, GPWebPay a další.",
                            Name = "Integrace platební brány",
                            Price = 3000m
                        },
                        new
                        {
                            Id = 18,
                            Description = "Přehledný manuál, který krok za krokem vysvětluje, jak systém ovládat – ideální při předání aplikace klientovi.",
                            Name = "Uživatelská dokumentace",
                            Price = 2000m
                        },
                        new
                        {
                            Id = 19,
                            Description = "Individuální online školení nebo konzultace přes videohovor. Přizpůsobíme se vašemu tempu i konkrétním potřebám.",
                            Name = "Školení na míru",
                            Price = 2500m
                        },
                        new
                        {
                            Id = 20,
                            Description = "Možnost nahrát nebo stáhnout data ve formátech CSV, Excel nebo PDF. Hodí se pro evidenci, účetnictví nebo zálohování.",
                            Name = "Export/Import dat",
                            Price = 2200m
                        },
                        new
                        {
                            Id = 21,
                            Description = "Různé úrovně přístupů – například admin, manažer nebo běžný uživatel. Každý uvidí jen to, co potřebuje.",
                            Name = "Správa uživatelských rolí",
                            Price = 2500m
                        });
                });

            modelBuilder.Entity("KnapSoft.Models.Solution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MonthlyPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Solutions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Ideální pro malé firmy a živnostníky. Jednoduchá prezentace služeb, kontaktní formulář a vlastní správa obsahu bez složitého ovládání.",
                            ImageUrl = "/images/emptyplaceholder.png",
                            MonthlyPrice = 1200m,
                            Name = "Jednoduchý web",
                            Price = 8000m
                        },
                        new
                        {
                            Id = 2,
                            Description = "Moderní mobilní web, který funguje i offline. Vaši zákazníci si jej mohou přidat na plochu jako aplikaci. Skvělé pro rychlé objednávky, rezervace nebo interní systémy.",
                            ImageUrl = "/images/emptyplaceholder.png",
                            MonthlyPrice = 1500m,
                            Name = "PWA aplikace",
                            Price = 12000m
                        },
                        new
                        {
                            Id = 3,
                            Description = "Základní e-shop pro menší prodej. Zahrnuje správu produktů, košík, online platby a přehledné objednávky. Vhodné pro začínající prodejce.",
                            ImageUrl = "/images/emptyplaceholder.png",
                            MonthlyPrice = 1800m,
                            Name = "Eshop Basic",
                            Price = 18000m
                        },
                        new
                        {
                            Id = 4,
                            Description = "Rozšířený e-shop pro rostoucí podnikání. Navíc nabízí fakturaci, přehledy pro účetní, exporty a více uživatelských práv. Vhodné pro firmy, které chtějí růst.",
                            ImageUrl = "/images/emptyplaceholder.png",
                            MonthlyPrice = 2200m,
                            Name = "Eshop Plus",
                            Price = 25000m
                        },
                        new
                        {
                            Id = 5,
                            Description = "Kompletní řešení pro rozvoz jídel nebo zboží. Zákazníci objednají online, vy dostanete přehled o objednávkách a trasách. Včetně notifikací a plateb.",
                            ImageUrl = "/images/emptyplaceholder.png",
                            MonthlyPrice = 2500m,
                            Name = "Rozvozový systém",
                            Price = 29000m
                        },
                        new
                        {
                            Id = 6,
                            Description = "Vše, co potřebujete pro rychlý provoz: přehled objednávek, pokladní režim, reporty a možnost tisku účtenek. Ideální pro bistra a fastfoody.",
                            ImageUrl = "/images/emptyplaceholder.png",
                            MonthlyPrice = 2800m,
                            Name = "Systém pro fastfoody",
                            Price = 32000m
                        },
                        new
                        {
                            Id = 7,
                            Description = "Správa menu, rezervace stolů a denní reporty. Jednoduché ovládání pro personál a přehledné rozhraní pro zákazníky. Připraveno pro provoz s obsluhou.",
                            ImageUrl = "/images/emptyplaceholder.png",
                            MonthlyPrice = 2500m,
                            Name = "Systém pro kavárny",
                            Price = 28000m
                        },
                        new
                        {
                            Id = 8,
                            Description = "Umožněte svým zákazníkům přihlásit se, sledovat objednávky, stahovat faktury nebo komunikovat. Vhodné i pro správu dokumentů a firemních služeb.",
                            ImageUrl = "/images/emptyplaceholder.png",
                            MonthlyPrice = 1900m,
                            Name = "Portál pro klienty",
                            Price = 22000m
                        },
                        new
                        {
                            Id = 9,
                            Description = "Profesionální systém pro provoz více firem nebo poboček pod jednou aplikací. Každý klient má své vlastní prostředí. Ideální pro B2B platformy nebo franšízy.",
                            ImageUrl = "/images/emptyplaceholder.png",
                            MonthlyPrice = 3200m,
                            Name = "Multitenant SaaS",
                            Price = 38000m
                        },
                        new
                        {
                            Id = 10,
                            Description = "Prémiové řešení s cloudovým hostingem na Azure, offline režimem, zákaznickou dokumentací a prioritní technickou podporou. Vhodné pro náročné projekty a firmy s růstem.",
                            ImageUrl = "/images/emptyplaceholder.png",
                            MonthlyPrice = 3500m,
                            Name = "Full Azure PWA",
                            Price = 45000m
                        });
                });

            modelBuilder.Entity("KnapSoft.Models.SolutionProduct", b =>
                {
                    b.Property<int>("SolutionId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("SolutionId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("SolutionProducts");

                    b.HasData(
                        new
                        {
                            SolutionId = 1,
                            ProductId = 1
                        },
                        new
                        {
                            SolutionId = 1,
                            ProductId = 2
                        },
                        new
                        {
                            SolutionId = 1,
                            ProductId = 4
                        },
                        new
                        {
                            SolutionId = 1,
                            ProductId = 14
                        },
                        new
                        {
                            SolutionId = 1,
                            ProductId = 10
                        },
                        new
                        {
                            SolutionId = 2,
                            ProductId = 1
                        },
                        new
                        {
                            SolutionId = 2,
                            ProductId = 2
                        },
                        new
                        {
                            SolutionId = 2,
                            ProductId = 4
                        },
                        new
                        {
                            SolutionId = 2,
                            ProductId = 5
                        },
                        new
                        {
                            SolutionId = 2,
                            ProductId = 12
                        },
                        new
                        {
                            SolutionId = 2,
                            ProductId = 11
                        },
                        new
                        {
                            SolutionId = 3,
                            ProductId = 1
                        },
                        new
                        {
                            SolutionId = 3,
                            ProductId = 2
                        },
                        new
                        {
                            SolutionId = 3,
                            ProductId = 3
                        },
                        new
                        {
                            SolutionId = 3,
                            ProductId = 4
                        },
                        new
                        {
                            SolutionId = 3,
                            ProductId = 7
                        },
                        new
                        {
                            SolutionId = 3,
                            ProductId = 10
                        },
                        new
                        {
                            SolutionId = 4,
                            ProductId = 1
                        },
                        new
                        {
                            SolutionId = 4,
                            ProductId = 2
                        },
                        new
                        {
                            SolutionId = 4,
                            ProductId = 3
                        },
                        new
                        {
                            SolutionId = 4,
                            ProductId = 4
                        },
                        new
                        {
                            SolutionId = 4,
                            ProductId = 5
                        },
                        new
                        {
                            SolutionId = 4,
                            ProductId = 7
                        },
                        new
                        {
                            SolutionId = 4,
                            ProductId = 20
                        },
                        new
                        {
                            SolutionId = 4,
                            ProductId = 21
                        },
                        new
                        {
                            SolutionId = 4,
                            ProductId = 10
                        },
                        new
                        {
                            SolutionId = 5,
                            ProductId = 1
                        },
                        new
                        {
                            SolutionId = 5,
                            ProductId = 2
                        },
                        new
                        {
                            SolutionId = 5,
                            ProductId = 3
                        },
                        new
                        {
                            SolutionId = 5,
                            ProductId = 4
                        },
                        new
                        {
                            SolutionId = 5,
                            ProductId = 5
                        },
                        new
                        {
                            SolutionId = 5,
                            ProductId = 7
                        },
                        new
                        {
                            SolutionId = 5,
                            ProductId = 17
                        },
                        new
                        {
                            SolutionId = 5,
                            ProductId = 20
                        },
                        new
                        {
                            SolutionId = 5,
                            ProductId = 10
                        },
                        new
                        {
                            SolutionId = 6,
                            ProductId = 1
                        },
                        new
                        {
                            SolutionId = 6,
                            ProductId = 2
                        },
                        new
                        {
                            SolutionId = 6,
                            ProductId = 3
                        },
                        new
                        {
                            SolutionId = 6,
                            ProductId = 4
                        },
                        new
                        {
                            SolutionId = 6,
                            ProductId = 7
                        },
                        new
                        {
                            SolutionId = 6,
                            ProductId = 20
                        },
                        new
                        {
                            SolutionId = 6,
                            ProductId = 21
                        },
                        new
                        {
                            SolutionId = 6,
                            ProductId = 10
                        },
                        new
                        {
                            SolutionId = 7,
                            ProductId = 1
                        },
                        new
                        {
                            SolutionId = 7,
                            ProductId = 2
                        },
                        new
                        {
                            SolutionId = 7,
                            ProductId = 4
                        },
                        new
                        {
                            SolutionId = 7,
                            ProductId = 5
                        },
                        new
                        {
                            SolutionId = 7,
                            ProductId = 6
                        },
                        new
                        {
                            SolutionId = 7,
                            ProductId = 7
                        },
                        new
                        {
                            SolutionId = 7,
                            ProductId = 20
                        },
                        new
                        {
                            SolutionId = 7,
                            ProductId = 21
                        },
                        new
                        {
                            SolutionId = 7,
                            ProductId = 10
                        },
                        new
                        {
                            SolutionId = 8,
                            ProductId = 1
                        },
                        new
                        {
                            SolutionId = 8,
                            ProductId = 2
                        },
                        new
                        {
                            SolutionId = 8,
                            ProductId = 4
                        },
                        new
                        {
                            SolutionId = 8,
                            ProductId = 5
                        },
                        new
                        {
                            SolutionId = 8,
                            ProductId = 7
                        },
                        new
                        {
                            SolutionId = 8,
                            ProductId = 8
                        },
                        new
                        {
                            SolutionId = 8,
                            ProductId = 10
                        },
                        new
                        {
                            SolutionId = 9,
                            ProductId = 1
                        },
                        new
                        {
                            SolutionId = 9,
                            ProductId = 2
                        },
                        new
                        {
                            SolutionId = 9,
                            ProductId = 4
                        },
                        new
                        {
                            SolutionId = 9,
                            ProductId = 5
                        },
                        new
                        {
                            SolutionId = 9,
                            ProductId = 7
                        },
                        new
                        {
                            SolutionId = 9,
                            ProductId = 8
                        },
                        new
                        {
                            SolutionId = 9,
                            ProductId = 9
                        },
                        new
                        {
                            SolutionId = 9,
                            ProductId = 10
                        },
                        new
                        {
                            SolutionId = 10,
                            ProductId = 1
                        },
                        new
                        {
                            SolutionId = 10,
                            ProductId = 2
                        },
                        new
                        {
                            SolutionId = 10,
                            ProductId = 4
                        },
                        new
                        {
                            SolutionId = 10,
                            ProductId = 5
                        },
                        new
                        {
                            SolutionId = 10,
                            ProductId = 7
                        },
                        new
                        {
                            SolutionId = 10,
                            ProductId = 12
                        },
                        new
                        {
                            SolutionId = 10,
                            ProductId = 11
                        },
                        new
                        {
                            SolutionId = 10,
                            ProductId = 13
                        },
                        new
                        {
                            SolutionId = 10,
                            ProductId = 18
                        },
                        new
                        {
                            SolutionId = 10,
                            ProductId = 19
                        },
                        new
                        {
                            SolutionId = 10,
                            ProductId = 15
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KnapSoft.Models.SolutionProduct", b =>
                {
                    b.HasOne("KnapSoft.Models.Product", "Product")
                        .WithMany("SolutionProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KnapSoft.Models.Solution", "Solution")
                        .WithMany("SolutionProducts")
                        .HasForeignKey("SolutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Solution");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KnapSoft.Models.Product", b =>
                {
                    b.Navigation("SolutionProducts");
                });

            modelBuilder.Entity("KnapSoft.Models.Solution", b =>
                {
                    b.Navigation("SolutionProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
